#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>
#include <cmath>
#include <numbers>

#include "RaceRunner.h"
#include "Tools/RootDirectory.h"

using Catch::Matchers::WithinAbs;
using Catch::Matchers::WithinRel;

constexpr double EPSILON = 0.001;  // %
constexpr double RT_DELTA = 500;  // seconds

namespace {
	const std::string root_directory = get_root_directory();
	const std::string route_file = root_directory + "/data/Route/route.csv";
	const std::string weather_file = root_directory + "/data/Weather/Australia/August/2007.csv";
	const std::string schedule_file = root_directory + "/data/Schedule/August/Schedule2007.toml";
	const std::string weather_stations_file = root_directory + "/data/Stations/australia_stations.csv";
}  // namespace

TEST_CASE("RaceSegmentRunner: calculate_static_charging_gain", "[RaceSegmentRunner]") {
	const WeatherStations weather_stations(weather_stations_file);
	const RaceSchedule schedule((ConfigFile::from_path(schedule_file).value()));
	const Route route(route_file, weather_stations);
	const Weather weather(weather_file, weather_stations);
	SECTION("Random Test 0") {
		constexpr double drag_coefficient = 0.00304324;
		constexpr double frontal_area = 5.05435;
		constexpr double array_area = 8.80593;
		constexpr double array_efficiency = 29.541;
		constexpr double energy_capacity = 6790.27;
		constexpr double min_voltage = 142.061;
		constexpr double max_voltage = 145.073;
		constexpr double resistance = 0.90914;
		constexpr double hysteresis_loss = 2.68151;
		constexpr double eddy_current_loss_coefficient = 0.0311676;
		constexpr double alpha = 0.760819;
		constexpr double beta = -2.45564;
		constexpr double a = 8.7356;
		constexpr double b = -7.85959e-06;
		constexpr double c = 0.423625;
		constexpr double pressure_at_stc = 187.943;
		constexpr double mass = 102.464;
		constexpr double wheel_radius = 0.108113;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double start_time = 1187940600.00000;
		constexpr double end_time = 1187955000.00000;
		constexpr double expected = 705.99;
		const double result = RaceRunner::calculate_static_charging_gain(car, weather, route.get_segment(12).weather_station, start_time, end_time);
		REQUIRE_THAT(result, WithinRel(expected, EPSILON));
	}
	SECTION("Random Test 1") {
		constexpr double drag_coefficient = 0.0092009;
		constexpr double frontal_area = 9.2343;
		constexpr double array_area = 2.0979;
		constexpr double array_efficiency = 15.945;
		constexpr double energy_capacity = 6937.9;
		constexpr double min_voltage = 98.117;
		constexpr double max_voltage = 163.99;
		constexpr double resistance = 0.88079;
		constexpr double hysteresis_loss = 1.1939;
		constexpr double eddy_current_loss_coefficient = 0.030878;
		constexpr double alpha = -7.9829;
		constexpr double beta = 6.5894;
		constexpr double a = 7.1863;
		constexpr double b = 6.6005e-06;
		constexpr double c = -0.4841;
		constexpr double pressure_at_stc = 149.16;
		constexpr double mass = 278.56;
		constexpr double wheel_radius = 0.33385;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double start_time = 1187940600.00000;
		constexpr double end_time = 1187955000.00000;
		constexpr double expected = 90.78;
		const double result = RaceRunner::calculate_static_charging_gain(car, weather, route.get_segment(12).weather_station, start_time, end_time);
		REQUIRE_THAT(result, WithinRel(expected, EPSILON));
	}
	SECTION("Random Test 2") {
		constexpr double drag_coefficient = 0.00017455;
		constexpr double frontal_area = 9.2673;
		constexpr double array_area = 3.5838;
		constexpr double array_efficiency = 18.61;
		constexpr double energy_capacity = 5072.6;
		constexpr double min_voltage = 102.31;
		constexpr double max_voltage = 161.42;
		constexpr double resistance = 0.32389;
		constexpr double hysteresis_loss = 2.8603;
		constexpr double eddy_current_loss_coefficient = 0.0039024;
		constexpr double alpha = -3.6067;
		constexpr double beta = 7.8946;
		constexpr double a = -6.7104;
		constexpr double b = 8.3275e-06;
		constexpr double c = -0.5751;
		constexpr double pressure_at_stc = 167.2;
		constexpr double mass = 176.87;
		constexpr double wheel_radius = 0.48976;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double start_time = 1187940600.00000;
		constexpr double end_time = 1187955000.00000;
		constexpr double expected = 181;
		const double result = RaceRunner::calculate_static_charging_gain(car, weather, route.get_segment(12).weather_station, start_time, end_time);
		REQUIRE_THAT(result, WithinRel(expected, EPSILON));
	}
	SECTION("Random Test 3") {
		constexpr double drag_coefficient = 0.0054015;
		constexpr double frontal_area = 9.7453;
		constexpr double array_area = 6.105;
		constexpr double array_efficiency = 16.111;
		constexpr double energy_capacity = 3162.2;
		constexpr double min_voltage = 75.29;
		constexpr double max_voltage = 160.41;
		constexpr double resistance = 0.24705;
		constexpr double hysteresis_loss = 1.6181;
		constexpr double eddy_current_loss_coefficient = 0.01715;
		constexpr double alpha = -7.4638;
		constexpr double beta = -5.7353;
		constexpr double a = 8.8931;
		constexpr double b = 7.1328e-06;
		constexpr double c = -0.9212;
		constexpr double pressure_at_stc = 156.58;
		constexpr double mass = 196.26;
		constexpr double wheel_radius = 0.11065;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double start_time = 1187940600.00000;
		constexpr double end_time = 1187955000.00000;
		constexpr double expected = 266.93;
		const double result = RaceRunner::calculate_static_charging_gain(car, weather, route.get_segment(12).weather_station, start_time, end_time);
		REQUIRE_THAT(result, WithinRel(expected, EPSILON));
	}
	SECTION("Random Test 4") {
		constexpr double drag_coefficient = 0.0056221;
		constexpr double frontal_area = 1.9934;
		constexpr double array_area = 6.5206;
		constexpr double array_efficiency = 29.525;
		constexpr double energy_capacity = 5007.6;
		constexpr double min_voltage = 135.23;
		constexpr double max_voltage = 159.4;
		constexpr double resistance = 0.37018;
		constexpr double hysteresis_loss = 1.6704;
		constexpr double eddy_current_loss_coefficient = 0.033714;
		constexpr double alpha = -8.4686;
		constexpr double beta = -0.09947;
		constexpr double a = 3.7149;
		constexpr double b = -3.5258e-06;
		constexpr double c = 0.075394;
		constexpr double pressure_at_stc = 151.07;
		constexpr double mass = 154.43;
		constexpr double wheel_radius = 0.33953;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double start_time = 1187940600.00000;
		constexpr double end_time = 1187955000.00000;
		constexpr double expected = 522.49;
		const double result = RaceRunner::calculate_static_charging_gain(car, weather, route.get_segment(12).weather_station, start_time, end_time);
		REQUIRE_THAT(result, WithinRel(expected, EPSILON));
	}
	SECTION("Random Test 5") {
		constexpr double drag_coefficient = 0.001046;
		constexpr double frontal_area = 2.5338;
		constexpr double array_area = 7.2673;
		constexpr double array_efficiency = 18.202;
		constexpr double energy_capacity = 5548.4;
		constexpr double min_voltage = 93.801;
		constexpr double max_voltage = 169.53;
		constexpr double resistance = 0.87695;
		constexpr double hysteresis_loss = 4.8281;
		constexpr double eddy_current_loss_coefficient = 0.041463;
		constexpr double alpha = 3.0502;
		constexpr double beta = -9.8094;
		constexpr double a = 3.3162;
		constexpr double b = -7.4632e-07;
		constexpr double c = 0.47984;
		constexpr double pressure_at_stc = 170.93;
		constexpr double mass = 171.97;
		constexpr double wheel_radius = 0.25892;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double start_time = 1187940600.00000;
		constexpr double end_time = 1187955000.00000;
		constexpr double expected = 359;
		const double result = RaceRunner::calculate_static_charging_gain(car, weather, route.get_segment(12).weather_station, start_time, end_time);
		REQUIRE_THAT(result, WithinRel(expected, EPSILON));
	}
	SECTION("Random Test 6") {
		constexpr double drag_coefficient = 0.00092941;
		constexpr double frontal_area = 2.9027;
		constexpr double array_area = 9.4608;
		constexpr double array_efficiency = 25.218;
		constexpr double energy_capacity = 4126.7;
		constexpr double min_voltage = 104.8;
		constexpr double max_voltage = 106.93;
		constexpr double resistance = 0.33189;
		constexpr double hysteresis_loss = 2.4417;
		constexpr double eddy_current_loss_coefficient = 0.048153;
		constexpr double alpha = 6.1216;
		constexpr double beta = -4.7691;
		constexpr double a = -8.5558;
		constexpr double b = 2.3467e-06;
		constexpr double c = -0.53045;
		constexpr double pressure_at_stc = 129.34;
		constexpr double mass = 293.72;
		constexpr double wheel_radius = 0.39988;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double start_time = 1187940600.00000;
		constexpr double end_time = 1187955000.00000;
		constexpr double expected = 647.48;
		const double result = RaceRunner::calculate_static_charging_gain(car, weather, route.get_segment(12).weather_station, start_time, end_time);
		REQUIRE_THAT(result, WithinRel(expected, EPSILON));
	}
	SECTION("Random Test 7") {
		constexpr double drag_coefficient = 0.0063999;
		constexpr double frontal_area = 3.5154;
		constexpr double array_area = 9.8797;
		constexpr double array_efficiency = 28.846;
		constexpr double energy_capacity = 3138.8;
		constexpr double min_voltage = 80.565;
		constexpr double max_voltage = 111.04;
		constexpr double resistance = 0.77595;
		constexpr double hysteresis_loss = 4.7062;
		constexpr double eddy_current_loss_coefficient = 0.0061507;
		constexpr double alpha = -3.9925;
		constexpr double beta = -7.9584;
		constexpr double a = 4.0265;
		constexpr double b = 1.1453e-06;
		constexpr double c = -0.034579;
		constexpr double pressure_at_stc = 124.12;
		constexpr double mass = 110.39;
		constexpr double wheel_radius = 0.22078;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double start_time = 1187940600.00000;
		constexpr double end_time = 1187955000.00000;
		constexpr double expected = 773.44;
		const double result = RaceRunner::calculate_static_charging_gain(car, weather, route.get_segment(12).weather_station, start_time, end_time);
		REQUIRE_THAT(result, WithinRel(expected, EPSILON));
	}
	SECTION("Random Test 8") {
		constexpr double drag_coefficient = 0.0052565;
		constexpr double frontal_area = 4.2407;
		constexpr double array_area = 9.4504;
		constexpr double array_efficiency = 27.944;
		constexpr double energy_capacity = 3484.3;
		constexpr double min_voltage = 78.146;
		constexpr double max_voltage = 165.49;
		constexpr double resistance = 0.5191;
		constexpr double hysteresis_loss = 1.4391;
		constexpr double eddy_current_loss_coefficient = 0.014674;
		constexpr double alpha = -7.6449;
		constexpr double beta = 7.295;
		constexpr double a = 8.0364;
		constexpr double b = 5.4893e-06;
		constexpr double c = 0.23794;
		constexpr double pressure_at_stc = 115.43;
		constexpr double mass = 286.17;
		constexpr double wheel_radius = 0.18358;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double start_time = 1187940600.00000;
		constexpr double end_time = 1187955000.00000;
		constexpr double expected = 716.69;
		const double result = RaceRunner::calculate_static_charging_gain(car, weather, route.get_segment(12).weather_station, start_time, end_time);
		REQUIRE_THAT(result, WithinRel(expected, EPSILON));
	}
	SECTION("Random Test 9") {
		constexpr double drag_coefficient = 0.0058989;
		constexpr double frontal_area = 5.1233;
		constexpr double array_area = 5.1647;
		constexpr double array_efficiency = 20.246;
		constexpr double energy_capacity = 6421;
		constexpr double min_voltage = 86.758;
		constexpr double max_voltage = 159.1;
		constexpr double resistance = 0.4636;
		constexpr double hysteresis_loss = 3.9926;
		constexpr double eddy_current_loss_coefficient = 0.033355;
		constexpr double alpha = -3.0249;
		constexpr double beta = -1.6719;
		constexpr double a = -3.0374;
		constexpr double b = 4.5438e-06;
		constexpr double c = -0.35693;
		constexpr double pressure_at_stc = 132.15;
		constexpr double mass = 151.22;
		constexpr double wheel_radius = 0.43317;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double start_time = 1187940600.00000;
		constexpr double end_time = 1187955000.00000;
		constexpr double expected = 283.78;
		const double result = RaceRunner::calculate_static_charging_gain(car, weather, route.get_segment(12).weather_station, start_time, end_time);
		REQUIRE_THAT(result, WithinRel(expected, EPSILON));
	}
}
TEST_CASE("RaceSegmentRunner: calculate_racetime", "[RaceSegmentRunner]") {
	const WeatherStations weather_stations(weather_stations_file);
	const RaceSchedule schedule((ConfigFile::from_path(schedule_file).value()));
	const Route route(route_file, weather_stations);
	const Weather weather(weather_file, weather_stations);
	SECTION("Random Test 0") {
		constexpr double drag_coefficient = 0.0032747;
		constexpr double frontal_area = 9.4442;
		constexpr double array_area = 1.2943;
		constexpr double array_efficiency = 22.236;
		constexpr double energy_capacity = 6321.9;
		constexpr double min_voltage = 72.743;
		constexpr double max_voltage = 168.21;
		constexpr double resistance = 0.26231;
		constexpr double hysteresis_loss = 3.4019;
		constexpr double eddy_current_loss_coefficient = 0.024921;
		constexpr double alpha = -3.2403;
		constexpr double beta = 1.6427;
		constexpr double a = 5.3749;
		constexpr double b = -2.1902e-06;
		constexpr double c = -0.90655;
		constexpr double pressure_at_stc = 167.28;
		constexpr double mass = 289.81;
		constexpr double wheel_radius = 0.30254;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double speed = 17.849;
		const double expected = 185763.57210;
		const auto result = RaceRunner::calculate_racetime(car, route, weather, schedule, speed);
		REQUIRE_THAT(result.value(), WithinAbs(expected, RT_DELTA));
	}
	SECTION("Random Test 1") {
		constexpr double drag_coefficient = 0.0071803;
		constexpr double frontal_area = 8.8456;
		constexpr double array_area = 5.9971;
		constexpr double array_efficiency = 29.543;
		constexpr double energy_capacity = 7273.3;
		constexpr double min_voltage = 95.684;
		constexpr double max_voltage = 147.27;
		constexpr double resistance = 0.35811;
		constexpr double hysteresis_loss = 4.2909;
		constexpr double eddy_current_loss_coefficient = 0.036211;
		constexpr double alpha = 9.2774;
		constexpr double beta = 1.8811;
		constexpr double a = -9.7607;
		constexpr double b = 7.9282e-06;
		constexpr double c = -0.046108;
		constexpr double pressure_at_stc = 165.43;
		constexpr double mass = 109.85;
		constexpr double wheel_radius = 0.20652;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double speed = 17.983;
		const auto result = RaceRunner::calculate_racetime(car, route, weather, schedule, speed);
		REQUIRE_FALSE(result.has_value());
	}
	SECTION("Random Test 2") {
		constexpr double drag_coefficient = 0.00043574;
		constexpr double frontal_area = 6.7659;
		constexpr double array_area = 6.0206;
		constexpr double array_efficiency = 20.975;
		constexpr double energy_capacity = 3549.9;
		constexpr double min_voltage = 146.38;
		constexpr double max_voltage = 156.78;
		constexpr double resistance = 0.18531;
		constexpr double hysteresis_loss = 3.3592;
		constexpr double eddy_current_loss_coefficient = 0.012583;
		constexpr double alpha = -2.1567;
		constexpr double beta = -7.0408;
		constexpr double a = -1.8567;
		constexpr double b = 8.7506e-06;
		constexpr double c = -0.31316;
		constexpr double pressure_at_stc = 138.67;
		constexpr double mass = 140.21;
		constexpr double wheel_radius = 0.35686;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double speed = 16.315;
		const double expected = 201703.53898;
		const auto result = RaceRunner::calculate_racetime(car, route, weather, schedule, speed);
		REQUIRE_THAT(result.value(), WithinAbs(expected, RT_DELTA));
	}
	SECTION("Random Test 3") {
		constexpr double drag_coefficient = 0.0068855;
		constexpr double frontal_area = 5.4439;
		constexpr double array_area = 2.7212;
		constexpr double array_efficiency = 18.144;
		constexpr double energy_capacity = 2942.4;
		constexpr double min_voltage = 136.19;
		constexpr double max_voltage = 136.37;
		constexpr double resistance = 0.69954;
		constexpr double hysteresis_loss = 1.2184;
		constexpr double eddy_current_loss_coefficient = 0.011754;
		constexpr double alpha = -5.1177;
		constexpr double beta = 6.45;
		constexpr double a = -9.5314;
		constexpr double b = -5.6315e-06;
		constexpr double c = 0.59754;
		constexpr double pressure_at_stc = 182.47;
		constexpr double mass = 262.84;
		constexpr double wheel_radius = 0.48908;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double speed = 11.065;
		const auto result = RaceRunner::calculate_racetime(car, route, weather, schedule, speed);
		REQUIRE_FALSE(result.has_value());
	}
	SECTION("Random Test 4") {
		constexpr double drag_coefficient = 0.0046197;
		constexpr double frontal_area = 4.1472;
		constexpr double array_area = 6.7714;
		constexpr double array_efficiency = 21.432;
		constexpr double energy_capacity = 2827.2;
		constexpr double min_voltage = 121.33;
		constexpr double max_voltage = 135.48;
		constexpr double resistance = 0.26929;
		constexpr double hysteresis_loss = 1.7844;
		constexpr double eddy_current_loss_coefficient = 0.049662;
		constexpr double alpha = 4.5269;
		constexpr double beta = -9.576;
		constexpr double a = 1.8655;
		constexpr double b = -7.3079e-06;
		constexpr double c = 0.69533;
		constexpr double pressure_at_stc = 172.98;
		constexpr double mass = 121.68;
		constexpr double wheel_radius = 0.43248;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double speed = 19.775;
		const double expected = 169246.74936;
		const auto result = RaceRunner::calculate_racetime(car, route, weather, schedule, speed);
		REQUIRE_THAT(result.value(), WithinAbs(expected, RT_DELTA));
	}
	SECTION("Random Test 5") {
		constexpr double drag_coefficient = 0.0056479;
		constexpr double frontal_area = 7.6335;
		constexpr double array_area = 7.9288;
		constexpr double array_efficiency = 18.36;
		constexpr double energy_capacity = 5546.2;
		constexpr double min_voltage = 121.02;
		constexpr double max_voltage = 127.74;
		constexpr double resistance = 0.38383;
		constexpr double hysteresis_loss = 2.2469;
		constexpr double eddy_current_loss_coefficient = 0.013116;
		constexpr double alpha = 8.4578;
		constexpr double beta = 7.9235;
		constexpr double a = 3.409;
		constexpr double b = -9.8854e-06;
		constexpr double c = -0.62834;
		constexpr double pressure_at_stc = 196.81;
		constexpr double mass = 222.86;
		constexpr double wheel_radius = 0.31864;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double speed = 10.825;
		const auto result = RaceRunner::calculate_racetime(car, route, weather, schedule, speed);
		REQUIRE_FALSE(result.has_value());
	}
	SECTION("Random Test 6") {
		constexpr double drag_coefficient = 0.0050687;
		constexpr double frontal_area = 6.6885;
		constexpr double array_area = 4.6551;
		constexpr double array_efficiency = 22.331;
		constexpr double energy_capacity = 6030.5;
		constexpr double min_voltage = 162.67;
		constexpr double max_voltage = 166.45;
		constexpr double resistance = 0.41433;
		constexpr double hysteresis_loss = 1.6947;
		constexpr double eddy_current_loss_coefficient = 0.045134;
		constexpr double alpha = -4.8425;
		constexpr double beta = -2.4377;
		constexpr double a = -3.2166;
		constexpr double b = 6.0321e-06;
		constexpr double c = -0.66574;
		constexpr double pressure_at_stc = 164.34;
		constexpr double mass = 226.11;
		constexpr double wheel_radius = 0.10731;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double speed = 15.108;
		const double expected = 216519.83391;
		const auto result = RaceRunner::calculate_racetime(car, route, weather, schedule, speed);
		REQUIRE_THAT(result.value(), WithinAbs(expected, RT_DELTA));
	}
	SECTION("Random Test 7") {
		constexpr double drag_coefficient = 0.0039272;
		constexpr double frontal_area = 4.653;
		constexpr double array_area = 5.0456;
		constexpr double array_efficiency = 21.127;
		constexpr double energy_capacity = 4329.5;
		constexpr double min_voltage = 110.04;
		constexpr double max_voltage = 111.12;
		constexpr double resistance = 0.93153;
		constexpr double hysteresis_loss = 2.3723;
		constexpr double eddy_current_loss_coefficient = 0.026834;
		constexpr double alpha = 5.1899;
		constexpr double beta = 7.5767;
		constexpr double a = 4.0804;
		constexpr double b = -3.7874e-06;
		constexpr double c = -0.63182;
		constexpr double pressure_at_stc = 173.91;
		constexpr double mass = 212.8;
		constexpr double wheel_radius = 0.1758;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double speed = 10.158;
		const auto result = RaceRunner::calculate_racetime(car, route, weather, schedule, speed);
		REQUIRE_FALSE(result.has_value());
	}
	SECTION("Random Test 8") {
		constexpr double drag_coefficient = 0.0027488;
		constexpr double frontal_area = 1.1618;
		constexpr double array_area = 7.2305;
		constexpr double array_efficiency = 20.995;
		constexpr double energy_capacity = 7316.5;
		constexpr double min_voltage = 87.742;
		constexpr double max_voltage = 110.86;
		constexpr double resistance = 0.11536;
		constexpr double hysteresis_loss = 1.6151;
		constexpr double eddy_current_loss_coefficient = 0.034246;
		constexpr double alpha = 2.3965;
		constexpr double beta = -6.4773;
		constexpr double a = 9.4594;
		constexpr double b = -5.5844e-06;
		constexpr double c = 0.33356;
		constexpr double pressure_at_stc = 162.8;
		constexpr double mass = 272.8;
		constexpr double wheel_radius = 0.40943;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double speed = 14.757;
		const double expected = 221291.14691;
		const auto result = RaceRunner::calculate_racetime(car, route, weather, schedule, speed);
		REQUIRE_THAT(result.value(), WithinAbs(expected, RT_DELTA));
	}
	SECTION("Random Test 9") {
		constexpr double drag_coefficient = 0.0036913;
		constexpr double frontal_area = 9.0867;
		constexpr double array_area = 2.0446;
		constexpr double array_efficiency = 17.339;
		constexpr double energy_capacity = 6954.2;
		constexpr double min_voltage = 82.816;
		constexpr double max_voltage = 122.93;
		constexpr double resistance = 0.54442;
		constexpr double hysteresis_loss = 3.1271;
		constexpr double eddy_current_loss_coefficient = 0.0082285;
		constexpr double alpha = -2.5767;
		constexpr double beta = 0.81301;
		constexpr double a = -9.66;
		constexpr double b = 1.0051e-06;
		constexpr double c = -0.051341;
		constexpr double pressure_at_stc = 156.55;
		constexpr double mass = 291.05;
		constexpr double wheel_radius = 0.12349;
		const auto aerobody = Aerobody(drag_coefficient, frontal_area);
		const auto array = Array(array_area, array_efficiency);
		const auto battery = Battery(energy_capacity, resistance, min_voltage, max_voltage);
		const auto motor = Motor(hysteresis_loss, eddy_current_loss_coefficient);
		const auto tire = Tire(SaeJ2452Coefficients{alpha, beta, a, b, c}, pressure_at_stc);
		const SolarCar car(aerobody, array, battery, motor, tire, mass, wheel_radius);
		constexpr double speed = 15.275;
		const auto result = RaceRunner::calculate_racetime(car, route, weather, schedule, speed);
		REQUIRE_FALSE(result.has_value());
	}
}
